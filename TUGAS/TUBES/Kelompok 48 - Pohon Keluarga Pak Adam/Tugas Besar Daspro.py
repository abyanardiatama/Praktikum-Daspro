# -*- coding: utf-8 -*-
"""Tugas Besar Dasar Pemrograman - Keluarga Pak Adam

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wl50Hh1mewOIBRHJckTZHG1I7Tj9RfDs

##STUDI KASUS
Pak adam merupakan kakek tua berusia lanjut, di umurnya yang sudah lansia ia ingin menyusun sebuah pohon keluarganya sendiri dengan detail sebagai berikut, 
- Hadi dan Rudi merupakan anak dari pak Adam
- Gani dan Ian merupakan anak dari Hadi
- Opick dan Sarah merupakan anak dari Rudi
- Dara dan Hilmi merupakan anak dari Gani
- Husna dan Jamal merupakan anak dari Ian
- Nonik dan Gofur merupakan anak dari Opick
- Raden dan Tarno merupakan anak dari Sarah

Buatlah sebuah fungsi yang mengembalikan anak dari pak Adam, cucu dari Pak Adam, dan Cicit dari pak Adam.

Selain itu, karena ia sudah tua, Ia berencana untuk membagikan warisannya juga pada anak cucunya, Ia penasaran apakah ada dari anak cucunya yang memiliki nama sama dengan anak cucunya yang lain, jika ada, ia akan memberikan bonus warisan padanya. 

Buatlah fungsi yang akan mengembalikan nama anak cucu pak Adam yang akan mendapatkan bonus

###Binary tree Menggunakan implementasi list
"""

def family_tree(t):
    if t == []:
        return []
    else:
        akar = t[0]
        left = t[1]
        right = t[2]
        return [akar, left, right]

"""###Selektor menggunakan implementasi lambda"""

#selektor menggunakan fungsi lambda
root = lambda t: t[0]
left_child = lambda t: t[1]
right_child = lambda t: t[2]

def is_empty(t):
    return t == []
def root_child(t):
    child = [root(left_child(t))] + [root(right_child(t))]
    return child
def grandchild(t):
    grandchild = [root_child(left_child(t))] + [root_child(right_child(t))]
    return grandchild
def greatgrandchild(t):
    greatgrandchild = (grandchild(left_child(t))) + (grandchild(right_child(t)))
    return greatgrandchild

t =   ["adam",
      ["hadi", 
              ["gani",  
                        ["dara",  [],[]],
                                        ["hilmi",  [],[]] ],
              ["ian",
                        ["husna",  [],[]],
                                        ["jamal",  [],[]] ]],
      ["rudy", 
              ["opick", 
                        ["husna",[],[]],
                                        ["gofur",[],[]] ], 
              ["sarah",
                        ["raden",[],[]],
                                        ["tarno",[],[]] ]]]

child = root_child(t)
cucu = grandchild(t)
cicit = greatgrandchild(t)
#greatgrandchild = greatgrandchild(t)
print("Anak dari pak Adam   = ", child)
print("Cucu dari pak adam   = ", cucu)
print("Cicit dari pak Adam  = ", cicit)

"""###Mencari pewaris yang akan mendapatkan bonus menggunakan make_intersect"""

def konso(x,L):
    return [x]+L
def Last(L):
    return L[-1]
def First(L):
    return L[0]
def Head(L):
    return L[:-1]
def Tail(L):
    return L[1:]
def is_empty(L):
    if L==[]:
        return True
def is_member(x,L):
    if is_empty(L):
        return False
    else:
        if Last(L)==x:
            return True
        elif Last(L)!=x:
            return is_member(x,Head(L))
def make_intersect(H1,H2):
    if is_empty(H1) and is_empty(H2):
        return []
    elif not is_empty(H1) and is_empty(H2):
        return []
    elif is_empty(H1) and not is_empty(H2):
        return []
    else:
        if is_member(First(H1),H2):
            return konso(First(H1),make_intersect(Tail(H1),H2))
        else:
            return make_intersect(Tail(H1),H2)
print("list cucu dari anak pak Adam")
hadi = cucu[0]
rudy = cucu[1]
print("hadi   = ",hadi)
print("rudy   = ",rudy)
print("\n")

print("list cicit dari cucu pak Adam")
gani  = cicit[0]
ian   = cicit[1]
opick = cicit[2]
sarah = cicit[3]
print("gani   = ",gani)
print("ian    = ",ian)
print("opick  = ",opick)
print("sarah  = ", sarah)
print("\n")

print("pewaris yang mendapat bonus =", make_intersect(ian,opick))
